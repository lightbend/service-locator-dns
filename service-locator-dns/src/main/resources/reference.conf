# Copyright 2017 Lightbend, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

service-locator-dns {
  # A list of translators - their order is significant. Translates a service name passed to the
  # service locator into a name that will be used for DNS SRV resolution. Only the first match
  # will be used. This can be easily overridden by providing a SERVICE_LOCATOR_DNS_NAME_TRANSLATORS
  # environment variable.
  #
  # The default translator below should be all that is required for a DC/OS or Mesos/Marathon
  # environment. Kubernetes DNS SRV records take the form:
  #
  #   _my-port-name._my-port-protocol.my-svc.my-namespace.svc.cluster.local
  #
  # ...which implies that your service name should provide the port name. For example with
  # Cassandra where there are typically 3 ports ("native" => 9042, "rpc" => 9160 and "storage" => 7200),
  # your service name might use a hyphen as a delim for the namespace, service name and port name e.g.
  # "customers-cassandra-native". In this case your translator would look like:
  #
  #   "(.*)-(.*)-(.*)" = "_$3._tcp.$2.$1.svc.cluster.local"
  #
  # You may also want to encode the service's protocol into its name given that the caller
  # that is interested in the service location will typically know whether it will be tcp or udp
  # (or anything else). Taking the above example, you might then have "customers-cassandra-native-tcp"
  # and translate these four components.
  #
  # You can of course have multiple translators though and statically declare the translations as
  # your service's configuration (you'll be supplying environment specific configuration quite typically
  # anyway...), and thus keep your service names nice and clean.
  #
  # By default though, we don't translate much i.e. we let it all pass through and put the onus on the
  # client to specify the right service name.
  name-translators = [
    {
      "^.*$" = "$0"
    }
  ]
  name-translators = ${?SERVICE_LOCATOR_DNS_NAME_TRANSLATORS}

  # A list of translators - their order is significant. Translates the SRV lookup name for downstream processing by
  # the library. The name will initially be looked up (after being passed through name-translators), and then the
  # result will be mapped according to this translation table.
  #
  # For example, this entry will rewrite any queries starting with _api._tcp and ensuring they become _api._http
  #
  # "^_api[.]_tcp[.](.+)$" = "_api.http.$1",
  #
  # By default, we don't transluate i.e. we let it all pass through.
  srv-translators = [
    {
      "^.*$" = "$0"
    }
  ]
  srv-translators = ${?SERVICE_LOCATOR_DNS_SRV_TRANSLATORS}

  # A list of external service mappings. These mappings will be used by service locator to resolve without dns 
  # configuration, helpful for non lagom or external services (implemented for kubernetes in mind). eg: 
  #
  # external-services = [{"service-name":"https://service-host:port"}]
  #
  #This can be easily overridden by providing a 
  # SERVICE_LOCATOR_DNS_EXTERNAL_SERVICES environment variable.
  external-services = []
  external-services = ${?SERVICE_LOCATOR_DNS_EXTERNAL_SERVICES}

  # The amount of time to wait for a DNS resolution to occur for the first and second lookups of a given
  # name.
  resolve-timeout1 = 1 second

  # The amount of time to wait for a DNS resolution to occur for the third lookup of a given
  # name.
  resolve-timeout2 = 2 seconds
}
